
syntax = "proto3";

import "nanopb.proto";

// Size: 16 + Payload (Max 1040)
message SPT_Data {
    bytes ulid = 1 [(nanopb).max_size = 16, (nanopb).fixed_length = true];
    bytes data = 2 [(nanopb).max_size = 1024];
}

// Size: 32 + Payload (Max 1056)
message SPT_Task {
    uint32 flags    = 1 [(nanopb).int_size = IS_16];
    bytes ulid      = 2 [(nanopb).max_size = 16, (nanopb).fixed_length = true];

    // RPC
    uint32 module   = 3 [(nanopb).int_size = IS_16];
    uint32 method   = 4 [(nanopb).int_size = IS_16];
    uint32 status   = 5 [(nanopb).int_size = IS_16];

    // If size > payload, expect more tasks with same id
    uint64 size     = 6;
    bytes payload   = 7 [(nanopb).max_size = 1024]; 
}

message SPT_Payload {
    oneof payload {
        SPT_Task task = 1;
        SPT_Data data = 2;
    }
}

// Size: 34 bytes
message SPT_Route {
    uint32 priority     = 1 [(nanopb).int_size = IS_8];
    uint32 hopcount     = 2 [(nanopb).int_size = IS_8];
    bytes source        = 3 [(nanopb).max_size = 16, (nanopb).fixed_length = true];
    bytes destination   = 4 [(nanopb).max_size = 16, (nanopb).fixed_length = true];
}

// Size: 1 + 34 + 4 (39) + Payload = 1166 Max bytes
message SPT_Header {
    uint32 version         = 1 [(nanopb).int_size = IS_8];

    SPT_Route route        = 2;

    // Validate excludes route hopcount
    uint32 crc             = 3;

    // One message may contain multiple payloads, upto 1127 bytes total
    repeated SPT_Payload payload = 4 [(nanopb).max_size = 1127];
}